{"version":3,"sources":["reducers/index.ts","reducers/locations.reducers.ts","actions/types.ts","store.js","serviceWorker.ts","components/Card.tsx","components/BreadCrumb.tsx","routes.ts","pages/HomePage.tsx","pages/CatalogPage.tsx","pages/CatalogDetailsPage.tsx","services/apis.ts","components/layouts/Header.tsx","actions/index.ts","App.tsx","index.tsx"],"names":["appReducer","combineReducers","locations","state","action","type","payload","rootReducer","store","createStore","applyMiddleware","thunk","Boolean","window","location","hostname","match","Card","name","imageUrl","className","src","process","alt","BreadCrumb","breadcrumbs","aria-label","map","b","index","length","to","link","path","component","exact","connect","useParams","branch","useState","catalog","setCatalog","useEffect","lc","find","l","categories","branches","c","key","image","catalogDetails","setCatalogDetails","subCategories","subcategories","Promise","resolve","reject","setTimeout","then","data","console","log","loadLocations","dispatch","a","apis","response","active","setActive","dropdownOpen","setDropdownOpen","undefined","activeLocation","setActiveLocation","toggleDropdown","role","onClick","aria-hidden","id","style","marginLeft","App","basename","routes","r","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.043554a1.chunk.js","sourcesContent":["import { combineReducers } from \"redux\";\nimport locations from './locations.reducers'\nconst appReducer = combineReducers({\n  locations\n});\n\nconst rootReducer = (state: any, action: any) => {\n  return appReducer(state, action)\n}\n\nexport default rootReducer;\n","import { LOAD_LOCATIONS } from '../actions/types'\n\ninterface LocationsActionInterface {\n    type: string\n    payload: any\n}\n\n\nexport default (state = [], action: LocationsActionInterface) => {\n    switch (action.type) {\n      case LOAD_LOCATIONS:\n        return [...state, ...action.payload];\n      default:\n        return state;\n    }\n  };\n","export const LOAD_LOCATIONS: string = 'LOAD_LOCATIONS'\n","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./reducers/index\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {FC} from 'react'\n\ninterface IProps {\n    name: string\n    imageUrl: string\n}\n\n\nconst Card:FC<IProps> = ({ name, imageUrl }) => (\n    <>\n    <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n            <img src={process.env.PUBLIC_URL+imageUrl} alt={name}/>\n        </figure>\n    </div>\n    <div className=\"card-content\">\n        <div className=\"content\">\n        { name }\n        <br />\n        </div>\n    </div>\n    </>\n)\n\nexport default Card\n","import React, {FC} from 'react'\nimport { Link } from \"react-router-dom\";\n\ntype breadcrumb  = { link: string, name: string }\n\ninterface IProps {\n    breadcrumbs: breadcrumb []\n}\n\nconst BreadCrumb:FC<IProps> = ({ breadcrumbs }) => {\n    return (\n    <nav className=\"breadcrumb\" aria-label=\"breadcrumbs\">\n        <ul>\n            { breadcrumbs.map((b:breadcrumb, index) => {\n                return (\n                    <li className={breadcrumbs.length === index ? `is-active` : ''}><Link to={b.link}>{ b.name }</Link></li>\n                )\n            }\n\n            ) }\n        </ul>\n    </nav>\n    )\n}\n\nexport default BreadCrumb\n","import Home from './pages/HomePage'\nimport CatalogPage from './pages/CatalogPage'\nimport CatalogDetailsPage from './pages/CatalogDetailsPage'\n\nexport default [\n  { path: \"/\", component: Home, exact: true, name: 'home' },\n  { path: \"/catalog/:location/:branch\", component: CatalogPage, exact: true, name: 'catalog' },\n  { path: \"/catalog-details/:location/:branch/:catalog\", component: CatalogDetailsPage, exact: true , name: 'catalog-details'}\n];\n","import React from 'react'\n\nexport default () => (\n    <div>\n    <section className=\"hero is-default is-fullheight-with-navbar\">\n        <div className=\"hero-body\">\n            <div className=\"container\">\n            <h1 className=\"title\">\n                Welcome to Rental Management System\n            </h1>\n            <h2 className=\"subtitle\">\n                Please Select Location\n            </h2>\n            </div>\n        </div>\n        </section>\n    </div>\n)\n","import React, { FC, useEffect, useState } from 'react'\nimport { useParams, Link } from \"react-router-dom\";\nimport { connect } from 'react-redux'\nimport Card from '../components/Card'\nimport BreadCrumb from '../components/BreadCrumb'\n\ninterface IProps {\n    locations: any\n}\n\nconst CatalogPage:FC<IProps> = ({ locations }) => {\n    let { location, branch } = useParams()\n    const [catalog, setCatalog] = useState<[]>([])\n    useEffect(()=> {\n        if (locations.length) {\n            const lc = locations.find((l: { name: string; }) => l.name === location)\n            const categories = lc && lc.branches.find((b: { name: string; }) => b.name === branch)\n            if (categories) {\n                setCatalog(categories.categories)\n            }\n        }\n        return () => {}\n    }, [locations, location, branch])\n    if (!catalog) {\n        return (<div>Loading Catalog</div>)\n    } else {\n        return (\n            <>\n            <BreadCrumb breadcrumbs={[\n                {link: '/', name: 'Home' },\n                {link: `/catalog/${location}/${branch}`, name: branch }\n            ]} />\n            <div className=\"columns is-3 is-multiline \">\n                {\n                    catalog.map((c: { name: string, image: string }) => (\n                        <div key={c.name} className=\"column is-one-quarter\">\n                        <div  className=\"card is-clickable\">\n                        <Link to={`/catalog-details/${location}/${branch}/${c.name}`}>\n                            <Card name={ c.name } imageUrl={`/category/${c.image}`} />\n                        </Link>\n                        </div>\n                        </div>\n                    ))\n                }\n            </div>\n            </>\n        )\n    }\n\n\n}\n\nconst mapStateToProps = <T extends { locations: any }>({ locations }: T) => {\n    return { locations  }\n}\n\n\nexport default connect(mapStateToProps)(CatalogPage)\n","import React, { FC, useEffect, useState } from 'react'\nimport { useParams } from \"react-router-dom\";\nimport { connect } from 'react-redux'\nimport Card from '../components/Card'\nimport BreadCrumb from '../components/BreadCrumb'\n\ninterface IProps {\n    locations: any\n}\n\nconst CatalogDetailsPage:FC<IProps> = ({ locations }) => {\n    let { location, branch, catalog } = useParams()\nconst [catalogDetails, setCatalogDetails] = useState<[]>([])\n    useEffect(()=> {\n        if (locations.length) {\n            const lc = locations.find((l: { name: string; }) => l.name === location)\n            const categories = lc && lc.branches.find((b: { name: string; }) => b.name === branch)\n            if (categories) {\n                const subCategories = categories.categories.find((c: { name: any; }) => c.name === catalog)\n                setCatalogDetails(subCategories.subcategories)\n            }\n        }\n        return () => {}\n    }, [locations, location, branch, catalog])\n\n    return (\n        <>\n        <BreadCrumb breadcrumbs={[\n            {link: '/', name: 'Home' },\n            {link: `/catalog/${location}/${branch}`, name: branch },\n            {link: `/catalog-details/${location}/${branch}/${catalog}`, name: catalog }\n        ]} />\n        <div className=\"columns is-3 is-multiline \">\n                {\n                    catalogDetails.map((c: { name: string, image: string }) => (\n                        <div key={c.name} className=\"column is-one-quarter\">\n                            <div  className=\"card\">\n                                <Card name={ c.name } imageUrl={`/category/subcategory/${c.image}`} />\n                            </div>\n                        </div>\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n\n\nconst mapStateToProps = <T extends { locations: any }>({ locations }: T) => {\n    return { locations  }\n}\n\nexport default connect(mapStateToProps)(CatalogDetailsPage)\n","import catalog from '../static/catalog.json'\nexport default {\n    async fetch_Locations () {\n        try{\n            return new Promise(function(resolve, reject) {\n                // Setting 2000 ms time\n                setTimeout(resolve, 1000);\n            }).then(function() {\n                return catalog.data\n            });\n        }catch(err){\n            console.log(err)\n        }\n    }\n}\n","import React, { FC, useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { loadLocations } from '../../actions/index'\nimport { Link } from 'react-router-dom'\n\ninterface IProps {\n    locations: any\n    loadLocations(): any\n}\n\nexport interface IActiveLocation {\n    branches: object [];\n    name: string;\n    dealers_id: string;\n    opco: string;\n  }\n\nconst Header:FC<IProps> = ({ loadLocations, locations }) => {\n    useEffect(() => {\n        loadLocations()\n    }, [loadLocations])\n\n    const [active, setActive] = useState(\"\");\n    const [dropdownOpen, setDropdownOpen] = useState(false)\n    const [activeLocation, setActiveLocation] = useState< IActiveLocation| undefined>(undefined);\n\n    const toggleDropdown = () => {\n        setDropdownOpen(!dropdownOpen)\n        setActiveLocation(undefined)\n    }\n\n    const toggleNav = () => {\n        // evt.preventDefault();\n        if (active !== \"\") {\n        setActive(\"\");\n        } else {\n        setActive(\"is-active\");\n        }\n    };\n\n    const closeNav = () => {\n        setActive(\"\");\n    };\n\n    if (!locations.length) {\n        return (<div>Loading...</div>)\n    }\n\n    return (\n        <>\n        <nav className=\"navbar is-info \" role=\"navigation\" aria-label=\"main navigation\">\n        <div className=\"navbar-brand\">\n        <button\n        onClick={toggleNav}\n        className={`button is-info navbar-burger ${active}`}\n      >\n        <span aria-hidden=\"true\" />\n        <span aria-hidden=\"true\" />\n        <span aria-hidden=\"true\" />\n      </button>\n        </div>\n\n        <div id=\"navbarBasicExample\" className={`navbar-menu ${active}`}>\n        <div className=\"navbar-start ml-6\">\n        <Link onClick={closeNav} className=\"navbar-item\" to=\"/\">Home</Link>\n        </div>\n\n    <div className=\"navbar-end mr-6\">\n        <div className={`navbar-item has-dropdown ${dropdownOpen && 'is-active'}`}>\n            <div onClick={toggleDropdown} className=\"navbar-link\">\n            Location\n            </div>\n\n            <div className=\"navbar-dropdown\">\n                { locations && locations.map((l: any) => (\n                    <div onClick={() => setActiveLocation(l) } key={l.name}\n                        className={`navbar-item is-clickable ${ activeLocation?.name === l.name && 'has-background-dark has-text-white-bis'}`}\n                    >\n                    { l.name }\n                    </div>\n                )) }\n            </div>\n\n        </div>\n    </div>\n  </div>\n        </nav>\n        {\n            activeLocation &&\n            <div style={{marginLeft:'73vw'}}>\n            <div className={`dropdown ${activeLocation && 'is-active'}`}>\n            <div className=\"dropdown-menu\" id=\"dropdown-menu3\" role=\"menu\">\n              <div className=\"dropdown-content\">\n              {\n                  activeLocation.branches.map((b: any) => (\n                    <Link onClick={toggleDropdown} key={b.name} to={`/catalog/${activeLocation.name}/${b.name}`} className=\"dropdown-item\">\n                    { b.name }\n                    </Link>\n                  ))\n              }\n\n              </div>\n            </div>\n            </div>\n            </div>\n        }\n        </>\n    )\n}\n\nconst mapStateToProps = <T extends { locations: any }>({ locations }: T) => {\n    return { locations  }\n}\n\nexport default connect(mapStateToProps, { loadLocations })(Header)\n","import { LOAD_LOCATIONS } from './types'\nimport apis from '../services/apis'\n\nexport const loadLocations = () => async (dispatch: (arg0: { type: string; payload: any }) => any) => {\n    const response = await apis.fetch_Locations()\n    const {locations}: any =  await response\n    return dispatch({\n        type: LOAD_LOCATIONS,\n        payload: locations\n    })\n}\n","import React from 'react'\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport { Provider } from \"react-redux\"\nimport store from \"./store\"\nimport routes from './routes'\nimport Header from './components/layouts/Header'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n    <Router basename={process.env.PUBLIC_URL}>\n      <Header />\n      {\n        routes.map(r => (\n          <Route key={r.path} exact path={r.path} component={r.component} />\n        ))\n      }\n    </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport './styles/styles.scss'\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}