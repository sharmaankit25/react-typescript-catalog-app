{"version":3,"sources":["reducers/index.ts","reducers/locations.reducers.ts","actions/types.ts","store.js","serviceWorker.ts","services/apis.ts","components/layouts/Header.tsx","actions/index.ts","pages/HomePage.tsx","components/Card.tsx","pages/CatalogPage.tsx","pages/CatalogDetailsPage.tsx","App.tsx","index.tsx"],"names":["appReducer","combineReducers","locations","state","action","type","payload","rootReducer","store","createStore","applyMiddleware","thunk","Boolean","window","location","hostname","match","Promise","resolve","reject","setTimeout","then","catalog","data","console","log","connect","loadLocations","dispatch","a","apis","response","useEffect","useState","active","setActive","dropdownOpen","setDropdownOpen","undefined","activeLocation","setActiveLocation","toggleDropdown","length","className","role","aria-label","onClick","aria-hidden","id","to","map","l","key","name","style","marginLeft","branches","b","Card","imageUrl","src","alt","useParams","branch","setCatalog","lc","find","categories","c","image","catalogDetails","setCatalogDetails","subCategories","subcategories","App","exact","path","component","Home","CatalogPage","CatalogDetailsPage","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0b80c504.chunk.js","sourcesContent":["import { combineReducers } from \"redux\";\nimport locations from './locations.reducers'\nconst appReducer = combineReducers({\n  locations\n});\n\nconst rootReducer = (state: any, action: any) => {\n  return appReducer(state, action)\n}\n\nexport default rootReducer;\n","import { LOAD_LOCATIONS } from '../actions/types'\n\ninterface LocationsActionInterface {\n    type: string\n    payload: any\n}\n\n\nexport default (state = [], action: LocationsActionInterface) => {\n    switch (action.type) {\n      case LOAD_LOCATIONS:\n        return [...state, ...action.payload];\n      default:\n        return state;\n    }\n  };\n","export const LOAD_LOCATIONS: string = 'LOAD_LOCATIONS'\n","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./reducers/index\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import catalog from '../static/catalog.json'\nexport default {\n    async fetch_Locations () {\n        try{\n            return new Promise(function(resolve, reject) {\n                // Setting 2000 ms time\n                setTimeout(resolve, 1000);\n            }).then(function() {\n                return catalog.data\n            });\n        }catch(err){\n            console.log(err)\n        }\n    }\n}\n","import React, { FC, useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { loadLocations } from '../../actions/index'\nimport { Link } from 'react-router-dom'\n\ninterface IProps {\n    locations: any\n    loadLocations(): any\n}\n\nexport interface IActiveLocation {\n    branches: object [];\n    name: string;\n    dealers_id: string;\n    opco: string;\n  }\n\nconst Header:FC<IProps> = ({ loadLocations, locations }) => {\n    useEffect(() => {\n        loadLocations()\n    }, [loadLocations])\n\n    const [active, setActive] = useState(\"\");\n    const [dropdownOpen, setDropdownOpen] = useState(false)\n    const [activeLocation, setActiveLocation] = useState< IActiveLocation| undefined>(undefined);\n\n    const toggleDropdown = () => {\n        setDropdownOpen(!dropdownOpen)\n        setActiveLocation(undefined)\n    }\n\n    const toggleNav = () => {\n        // evt.preventDefault();\n        if (active !== \"\") {\n        setActive(\"\");\n        } else {\n        setActive(\"is-active\");\n        }\n    };\n\n    const closeNav = () => {\n        setActive(\"\");\n    };\n\n    if (!locations.length) {\n        return (<div>Loading...</div>)\n    }\n\n    return (\n        <>\n        <nav className=\"navbar is-info \" role=\"navigation\" aria-label=\"main navigation\">\n        <div className=\"navbar-brand\">\n        <button\n        onClick={toggleNav}\n        className={`button is-info navbar-burger ${active}`}\n      >\n        <span aria-hidden=\"true\" />\n        <span aria-hidden=\"true\" />\n        <span aria-hidden=\"true\" />\n      </button>\n        </div>\n\n        <div id=\"navbarBasicExample\" className={`navbar-menu ${active}`}>\n        <div className=\"navbar-start ml-6\">\n        <Link onClick={closeNav} className=\"navbar-item\" to=\"/\">Home</Link>\n        </div>\n\n    <div className=\"navbar-end mr-6\">\n        <div className={`navbar-item has-dropdown ${dropdownOpen && 'is-active'}`}>\n            <div onClick={toggleDropdown} className=\"navbar-link\">\n            Location\n            </div>\n\n            <div className=\"navbar-dropdown\">\n                { locations && locations.map((l: any) => (\n                    <div onClick={() => setActiveLocation(l) } key={l.name}\n                        className={`navbar-item is-clickable ${ activeLocation?.name === l.name && 'has-background-dark has-text-white-bis'}`}\n                    >\n                    { l.name }\n                    </div>\n                )) }\n            </div>\n\n        </div>\n    </div>\n  </div>\n        </nav>\n        {\n            activeLocation &&\n            <div style={{marginLeft:'73vw'}}>\n            <div className={`dropdown ${activeLocation && 'is-active'}`}>\n            <div className=\"dropdown-menu\" id=\"dropdown-menu3\" role=\"menu\">\n              <div className=\"dropdown-content\">\n              {\n                  activeLocation.branches.map((b: any) => (\n                    <Link onClick={toggleDropdown} key={b.name} to={`/catalog/${activeLocation.name}/${b.name}`} className=\"dropdown-item\">\n                    { b.name }\n                    </Link>\n                  ))\n              }\n\n              </div>\n            </div>\n            </div>\n            </div>\n        }\n        </>\n    )\n}\n\nconst mapStateToProps = <T extends { locations: any }>({ locations }: T) => {\n    return { locations  }\n}\n\nexport default connect(mapStateToProps, { loadLocations })(Header)\n","import { LOAD_LOCATIONS } from './types'\nimport apis from '../services/apis'\n\nexport const loadLocations = () => async (dispatch: (arg0: { type: string; payload: any }) => any) => {\n    const response = await apis.fetch_Locations()\n    const {locations}: any =  await response\n    return dispatch({\n        type: LOAD_LOCATIONS,\n        payload: locations\n    })\n}\n","import React from 'react'\n\nexport default () => (\n    <div>\n    <section className=\"hero is-default is-fullheight-with-navbar\">\n        <div className=\"hero-body\">\n            <div className=\"container\">\n            <h1 className=\"title\">\n                Welcome to Rental Management System\n            </h1>\n            <h2 className=\"subtitle\">\n                Please Select Location\n            </h2>\n            </div>\n        </div>\n        </section>\n    </div>\n)\n","import React, {FC} from 'react'\n\ninterface IProps {\n    name: string\n    imageUrl: string\n}\n\n\nconst Card:FC<IProps> = ({ name, imageUrl }) => (\n    <>\n    <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n            <img src={imageUrl} alt={name}/>\n        </figure>\n    </div>\n    <div className=\"card-content\">\n        <div className=\"content\">\n        { name }\n        <br />\n        </div>\n    </div>\n    </>\n)\n\nexport default Card\n","import React, { FC, useEffect, useState } from 'react'\nimport { useParams, Link } from \"react-router-dom\";\nimport { connect } from 'react-redux'\nimport Card from '../components/Card'\n\ninterface IProps {\n    locations: any\n}\n\nconst CatalogPage:FC<IProps> = ({ locations }) => {\n    let { location, branch } = useParams()\n    const [catalog, setCatalog] = useState<[]>([])\n    useEffect(()=> {\n        if (locations.length) {\n            const lc = locations.find((l: { name: string; }) => l.name === location)\n            const categories = lc && lc.branches.find((b: { name: string; }) => b.name === branch)\n            if (categories) {\n                setCatalog(categories.categories)\n            }\n        }\n        return () => {}\n    }, [locations, location, branch])\n    if (!catalog) {\n        return (<div>Loading Catalog</div>)\n    } else {\n        return (\n            <div className=\"columns is-3 is-multiline \">\n                {\n                    catalog.map((c: { name: string, image: string }) => (\n                        <div key={c.name} className=\"column is-one-quarter\">\n                        <div  className=\"card is-clickable\">\n                        <Link to={`/catalog-details/${location}/${branch}/${c.name}`}>\n                            <Card name={ c.name } imageUrl={`/category/${c.image}`} />\n                        </Link>\n                        </div>\n                        </div>\n                    ))\n                }\n            </div>\n        )\n    }\n\n\n}\n\nconst mapStateToProps = <T extends { locations: any }>({ locations }: T) => {\n    return { locations  }\n}\n\n\nexport default connect(mapStateToProps)(CatalogPage)\n","import React, { FC, useEffect, useState } from 'react'\nimport { useParams } from \"react-router-dom\";\nimport { connect } from 'react-redux'\nimport Card from '../components/Card'\n\ninterface IProps {\n    locations: any\n}\n\nconst CatalogDetailsPage:FC<IProps> = ({ locations }) => {\n    let { location, branch, catalog } = useParams()\nconst [catalogDetails, setCatalogDetails] = useState<[]>([])\n    useEffect(()=> {\n        if (locations.length) {\n            const lc = locations.find((l: { name: string; }) => l.name === location)\n            const categories = lc && lc.branches.find((b: { name: string; }) => b.name === branch)\n            if (categories) {\n                const subCategories = categories.categories.find((c: { name: any; }) => c.name === catalog)\n                setCatalogDetails(subCategories.subcategories)\n            }\n        }\n        return () => {}\n    }, [locations, location, branch, catalog])\n\n    return (\n        <div className=\"columns is-3 is-multiline \">\n                {\n                    catalogDetails.map((c: { name: string, image: string }) => (\n                        <div key={c.name} className=\"column is-one-quarter\">\n                            <div  className=\"card\">\n                                <Card name={ c.name } imageUrl={`/category/subcategory/${c.image}`} />\n                            </div>\n                        </div>\n                    ))\n                }\n            </div>\n    )\n}\n\n\nconst mapStateToProps = <T extends { locations: any }>({ locations }: T) => {\n    return { locations  }\n}\n\nexport default connect(mapStateToProps)(CatalogDetailsPage)\n","import React from 'react'\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport { Provider } from \"react-redux\"\nimport store from \"./store\"\nimport Header from './components/layouts/Header'\nimport Home from './pages/HomePage'\nimport CatalogPage from './pages/CatalogPage'\nimport CatalogDetailsPage from './pages/CatalogDetailsPage'\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n    <Router>\n      <Header />\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/catalog/:location/:branch\" component={CatalogPage} />\n      <Route exact path=\"/catalog-details/:location/:branch/:catalog\" component={CatalogDetailsPage} />\n    </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport './styles/styles.scss'\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}